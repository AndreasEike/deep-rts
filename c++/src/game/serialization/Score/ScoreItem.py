# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Score

import flatbuffers

class ScoreItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsScoreItem(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScoreItem()
        x.Init(buf, n + offset)
        return x

    # ScoreItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScoreItem
    def Apm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScoreItem
    def Score(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScoreItem
    def ActionStats(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ScoreItem
    def ActionStatsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ScoreItemStart(builder): builder.StartObject(3)
def ScoreItemAddApm(builder, apm): builder.PrependUint32Slot(0, apm, 0)
def ScoreItemAddScore(builder, score): builder.PrependUint32Slot(1, score, 0)
def ScoreItemAddActionStats(builder, actionStats): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(actionStats), 0)
def ScoreItemStartActionStatsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ScoreItemEnd(builder): return builder.EndObject()
